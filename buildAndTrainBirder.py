"""buildAndTrainBirder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16vqAHLRXfKtOzKXecd9vKy_sM1ytur_c
"""

from google.colab import drive
drive.mount('/content/drive')
!ls "/content/drive/My Drive"

birdsVsSquirrelsTrain_filepath= '/content/drive/MyDrive/birds-20-eachOf-358.tfrecords'
birdsVsSquirrelsValidation_filepath= '/content/drive/MyDrive/birds-10-eachOf-358.tfrecords'

import tensorflow as tf
rawBirdVsSquirrelTrain=tf.data.TFRecordDataset(birdsVsSquirrelsTrain_filepath)
rawBirdVsSquirrelValidation=tf.data.TFRecordDataset(birdsVsSquirrelsValidation_filepath)

datLen=rawBirdVsSquirrelTrain.reduce(0,lambda x,y: x+1)

n_train=int(datLen.numpy()*.85)
n_test=int(datLen.numpy()*.15)

feature_description={'image':tf.io.FixedLenFeature([],tf.string),'birdType':tf.io.FixedLenFeature([],tf.int64)}
def parse_examples(serialized_examples):
    examples=tf.io.parse_example(serialized_examples,feature_description)
    targets=examples.pop('birdType')
    images=tf.image.resize_with_pad(tf.cast(tf.io.decode_jpeg(examples['image'],channels=3),tf.float32),299,299)
    return images, targets

datasetTrain = rawBirdVsSquirrelTrain.take(n_train).map(parse_examples, num_parallel_calls=tf.data.experimental.AUTOTUNE)
datasetValidation = rawBirdVsSquirrelValidation.map(parse_examples, num_parallel_calls=tf.data.experimental.AUTOTUNE)
datasetTest = rawBirdVsSquirrelTrain.skip(n_train).take(n_test).map(parse_examples, num_parallel_calls=tf.data.experimental.AUTOTUNE)

def preproc(image,label):
    inp=tf.keras.applications.xception.preprocess_input(image)
    return inp,label

datasetTrain_batched= datasetTrain.map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)
datasetTest_batched =  datasetTest.map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)
datasetValidation_batched =  datasetValidation.map(preproc,num_parallel_calls=tf.data.AUTOTUNE).batch(64)

base_model=tf.keras.applications.xception.Xception(weights='imagenet',include_top=False)

avg=tf.keras.layers.GlobalAveragePooling2D()(base_model.output)
output=tf.keras.layers.Dense(358,activation="softmax")(avg)
model=tf.keras.models.Model(inputs=base_model.input,outputs=output)

for layer in base_model.layers:
    layer.trainable=False

top5err=tf.keras.metrics.SparseTopKCategoricalAccuracy(k=5,name='top5')
top10err=tf.keras.metrics.SparseTopKCategoricalAccuracy(k=10,name='top10')
top20err=tf.keras.metrics.SparseTopKCategoricalAccuracy(k=20,name='top20')

checkpoint_cb=tf.keras.callbacks.ModelCheckpoint('birdModTopFit.h5',save_best_only=True)

earlyStop_cb=tf.keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)
ss=5e-1
optimizer=tf.keras.optimizers.SGD(learning_rate=ss)
model.compile(loss="sparse_categorical_crossentropy",optimizer=optimizer,metrics=['accuracy',top5err,top10err,top20err])

model.fit(datasetTrain_batched,validation_data=datasetValidation_batched,epochs=10,callbacks=[checkpoint_cb,earlyStop_cb])

tf.saved_model.save(model, '/content/drive/MyDrive/birderModel')